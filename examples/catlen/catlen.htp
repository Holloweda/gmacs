#if !defined(_CATLEN_)
#  define _CATLEN_

class model_data : public ad_comm{
  data_int nyrs;
  data_int ndclass;
  data_int nsex;
  data_int nshell;
  data_int nstage;
  data_int nclass;
  data_vector breaks;
  dmatrix N;
  dmatrix NX;
  data_matrix obs_catch_at_size;
  data_vector effort;
  data_number M;
  dvector relwt;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_number log_q;
  param_init_number log_popscale;
  param_init_bounded_dev_vector log_sel_coff;
  param_init_bounded_dev_vector log_relpop;
  param_init_bounded_dev_vector effort_devs;
  param_vector log_sel;
  param_vector log_initpop;
  param_matrix F;
  param_matrix Z;
  param_matrix S;
  param_matrix N;
  param_matrix C;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value f;
  param_number recsum;
  param_number initsum;
  param_stddev_number avg_F;
  param_stddev_vector predicted_N;
  param_stddev_vector ratio_N;
  param_likeprof_number pred_B;
public:
  virtual void userfunction(void);
  virtual void report(void);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void);
  void get_mortality_and_survivial_rates(void);
  void get_numbers_at_size(void);
  void get_catch_at_size(void);
  void evaluate_the_objective_function(void);

};
#endif

#if !defined(_GMACS_)
#  define _GMACS_

class model_data : public ad_comm{
  init_adstring data_file;
  init_adstring control_file;
  init_adstring size_trans_file;
  data_int verbose;
  data_int final_phase;
  data_int use_pin;
  data_int read_growth;
  data_int eof_starter;
  data_int styr;
  data_int endyr;
  data_number tstep;
  data_int nsex;
  data_int nfleet;
  data_int nsurvey;
  data_int nclass;
  data_int ndclass;
  data_imatrix class_link;
  data_vector catch_units;
  data_vector catch_multi;
  data_vector survey_units;
  data_vector survey_multi;
  data_int ncatch_obs;
  data_int nsurvey_obs;
  data_number survey_time;
  data_matrix catch_data;
  data_matrix survey_data;
  data_vector discard_mort;
  data_vector retention;
  data_matrix catch_time;
  data_matrix effort;
  data_imatrix f_new;
  data_vector nat_mort;
  data_vector mean_length;
  data_vector mean_weight;
  data_vector fecundity;
  data_int lf_flag;
  data_int nlf_obs;
  data_matrix lf_data;
  data_int nlfs_obs;
  data_matrix lfs_data;
  data_int ncapture_obs;
  data_int nmark_obs;
  data_int nrecapture_obs;
  data_matrix capture_data;
  data_matrix mark_data;
  data_matrix recapture_data;
  data_int eof_data;
  data_int syr;
  data_int nyr;
  data_number dt;
  data_int ngear;
  data_int nbin;
  data_vector xbin;
  int nx;
  int nr;
  dvector xmid;
  data_imatrix dim_array;
  ivector irow;
  ivector ncol;
  ivector jcol;
  ivector fi_count;
  data_matrix Effort;
  dvector mean_Effort;
  data_3array i_C;
  data_3array i_M;
  data_3array i_R;
  d3_array C;
  d3_array M;
  d3_array R;
  data_int eof_hbc;
  data_int nj;
  data_int styr_L;
  data_int endyr_L;
  data_ivector jbin;
  data_3array L;
  data_int eof_growth;
  data_int npar;
  data_matrix theta_control;
  dmatrix trans_theta_control;
  dvector theta_ival;
  dvector theta_lbnd;
  dvector theta_ubnd;
  ivector theta_phz;
  ivector theta_prior;
  data_ivector sel_type;
  data_ivector sel_phz;
  data_vector lx_ival;
  data_vector gx_ival;
  data_ivector x_nodes;
  data_vector sel_pen1;
  data_vector sel_pen2;
  ivector isel_npar;
  data_int nflags;
  data_vector flag;
  imatrix min_tag_j;
  int SimFlag;
  int rseed;
  dvector true_Nt;
  dvector true_Rt;
  dvector true_Tt;
  dmatrix true_fi;
  data_int eof_control;
  data_int bmsy_start;
  data_int bmsy_end;
  data_int eof_forecast;
  int par_count;
  int active_count;
  int active_parms;
  ivector active_parm;
  double dummy_datum;
  int dummy_phase;
  int max_phase;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_bounded_number_vector theta;
  param_number log_ddot_r;
  param_number log_bar_r;
  param_number m_infty;
  param_number l_infty;
  param_number vbk;
  param_number beta;
  param_number mu_r;
  param_number cv_r;
  param_init_vector log_bar_f;
  param_init_vector log_tau;
  param_init_bounded_vector_vector sel_par;
  param_init_bounded_dev_vector ddot_r_devs;
  param_init_bounded_dev_vector bar_r_devs;
  param_init_bounded_dev_vector l_infty_devs;
  param_init_bounded_matrix bar_f_devs;
  param_stddev_number sd_l_infty;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value f;
  param_number m_linf;
  param_number fpen;
  param_vector tau;
  param_vector qk;
  param_vector mx;
  param_vector rx;
  param_vector log_rt;
  param_matrix fi;
  param_matrix sx;
  param_matrix N;
  param_matrix T;
  param_matrix A;
  param_matrix hat_ct;
  param_matrix delta;
  param_3array Chat;
  param_3array Mhat;
  param_3array Rhat;
  param_3array iP;
  param_init_bounded_number dummy_parm;
public:
  virtual void userfunction(void);
  virtual void report(void);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void);
 void runSimulationModel(const int& seed);
  void initParameters(void);
  void calcSizeTransitionMatrix(void);
  void initializeModel(void);
  void calcCaptureProbability(void);
  void calcSurvivalAtLength(void);
  void calcSelectivityAtLength(void);
  void calcNumbersAtLength(void);
  void calcObservations(void);
  void calc_objective_function(void);
 dvar_matrix calcLTM(dvector& x, const dvariable &linf, const dvariable &k, const dvariable &beta);

};
#endif
